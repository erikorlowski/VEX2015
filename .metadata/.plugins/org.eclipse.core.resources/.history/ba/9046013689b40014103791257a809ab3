/** @file auto.c
 * @brief File for autonomous code
 *
 * This file should contain the user autonomous() function and any functions related to it.
 *
 * Copyright (c) 2011-2014, Purdue University ACM SIG BOTS.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Purdue University ACM SIG BOTS nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL PURDUE UNIVERSITY ACM SIG BOTS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Purdue Robotics OS contains FreeRTOS (http://www.freertos.org) whose source code may be
 * obtained from http://sourceforge.net/projects/freertos/files/ or on request.
 */

#include "main.h"

/*
 * Runs the user autonomous code. This function will be started in its own task with the default
 * priority and stack size whenever the robot is enabled via the Field Management System or the
 * VEX Competition Switch in the autonomous mode. If the robot is disabled or communications is
 * lost, the autonomous task will be stopped by the kernel. Re-enabling the robot will restart
 * the task, not re-start it from where it left off.
 *
 * Code running in the autonomous task cannot access information from the VEX Joystick. However,
 * the autonomous function can be invoked from another task if a VEX Competition Switch is not
 * available, and it can access joystick information if called in this way.
 *
 * The autonomous task may exit, unlike operatorControl() which should never exit. If it does
 * so, the robot will await a switch to another mode or disable/enable cycle.
 */
int driveX;
int driveY;
int leftSpeed;
int rightSpeed;
int liftSpeed;
int clawSpeed = 0;
const int CLAW_OPEN_SPEED = 100;
const int CLAW_CLOSE_SPEED = -100;

int alliance = 0;
const int BLUE = 0;
const int RED = 1;

int abs(int num)
{
	if(num < 0)
	{
		return -num;
	}

	return num;
}

int deadBand(int pV, int sP, int deadBand)
{
	return abs(pV - sP) < deadBand;
}

void drive(int left, int right)
{
	left = (LEFT_MOTOR_INVERTED) ? -left : left;
	right = (RIGHT_MOTOR_INVERTED) ? -right : right;

	motorSet(LEFT_MOTOR, left);
	motorSet(RIGHT_MOTOR, right);
}

void lift(int liftSpeed)
{
	motorSet(LIFT_MOTOR_BOT, LIFT_MOTOR_BOT_INVERTED ? -liftSpeed : liftSpeed);
	motorSet(LIFT_MOTOR_MID, LIFT_MOTOR_MID_INVERTED ? -liftSpeed : liftSpeed);
	motorSet(LIFT_MOTOR_TOP, LIFT_MOTOR_TOP_INVERTED ? -liftSpeed : liftSpeed);
}

void getDriveIME(int *pLeft, int *pRight)
{
	imeGet(LEFT_IME, pLeft);
	imeGet(RIGHT_IME, pRight);

	*pLeft = (LEFT_IME_INVERTED) ? -(*pLeft) : *pLeft;
	*pRight = (RIGHT_IME_INVERTED) ? -(*pRight) : *pRight;
}

int getDrive()
{
	return digitalRead(ALLIANCE_SELECTION_SWITCH);
}

void autonInit()
{
	alliance = RED;//getAlliance();

	int startTime = millis();

	while(millis() - startTime < 1000)
	{
		puts("Autonomous");

		clawSpeed = (millis() - startTime < 600) ? CLAW_OPEN_SPEED : 0;

		motorSet(CLAW, clawSpeed);
		lift(50);
		delay(20);
	}

	motorSet(CLAW, 0);
	lift(0);

	while(digitalRead(LIFT_LIMIT_SWITCH))
	{
		lift(-50);
	}

	encoderReset(liftEnc);

	lift(0);
}

void autonomous()
{
	int heights[] = {HEIGHT_1, HEIGHT_2, HEIGHT_3, HEIGHT_4, HEIGHT_5, HEIGHT_6, HEIGHT_7};
	int step = 1;
	int isAuto = 1;
	int skyRise = 0;
	int lastStep = 0;

	int elapsedTime = 0;
	int stepStartTime = 0;

	int leftMoved = 0;
	int rightMoved = 0;

	autonInit();

	while(isAuto && isAutonomous() && isEnabled())
	{
		//Code to happen in all steps goes here
		if(step != lastStep)
		{
			stepStartTime = millis();
			imeReset(RIGHT_IME);
			imeReset(LEFT_IME);
		}

		lastStep = step;

		elapsedTime = millis() - stepStartTime;

		printf("Step: %d\n", step);

		switch(step)
		{
		case(1):
			lift(100);
			drive(0,0);
			motorSet(CLAW, 0);

			printf("Encoder: %d\n", encoderGet(liftEnc));

			if(encoderGet(liftEnc) > LOAD_HEIGHT)
			{
				lift(0);

				step++;
			}
			break;

		case(2):
			drive(50,50);
			lift(0);
			motorSet(CLAW, 0);

			getDriveIME(&leftMoved, &rightMoved);

			printf("Left: %d\nRight%d\nSkyrise: %d,\nTime: %d", leftMoved, rightMoved, skyRise, elapsedTime);

			if(/*(leftMoved > 500 && rightMoved > 500) || */(elapsedTime > ((skyRise == 0) ? 2000 : 3000)))
			{
				drive(0,0);
				step++;
			}

			break;

		case(3):
			motorSet(CLAW, CLAW_CLOSE_SPEED);
			drive(0,0);
			lift(0);

			if(elapsedTime > 200)
			{
				motorSet(CLAW, 0);
				step++;
			}

			break;

		case(4):
			lift(100);
			drive(0,0);
			motorSet(CLAW, CLAW_CLOSE_SPEED);

			printf("Encoder: %d\n", encoderGet(liftEnc));

			if(encoderGet(liftEnc) > LOAD_HEIGHT + 1500)
			{
				lift(0);

				step++;
			}
			break;

		case(5):
			drive(-40,-40);
			lift(0);
			motorSet(CLAW, 0);

			getDriveIME(&leftMoved, &rightMoved);

			printf("Left: %d\nRight%d\n", leftMoved, rightMoved);

			if(leftMoved < (((alliance == BLUE) ? -575 : -725) + ((skyRise == 0) ? 0 : -50)) && rightMoved < (((alliance == BLUE) ? -575 : -725) + ((skyRise == 0) ? 0 : -50)))//Red was 650
			{
				drive(0,0);
				step++;
			}

			break;

		case(6):
			if(alliance == BLUE)
			{
				drive(50,-50);
				lift(0);
				motorSet(CLAW, 0);

				getDriveIME(&leftMoved, &rightMoved);

				printf("Left: %d\nRight%d\n", leftMoved, rightMoved);

				if(leftMoved > 500 && rightMoved < -500)
				{
					drive(0,0);
					step++;
				}
			}
			else
			{
				drive(-50,50);
				lift(0);
				motorSet(CLAW, 0);

				getDriveIME(&leftMoved, &rightMoved);

				printf("Left: %d\nRight%d\n", leftMoved, rightMoved);

				if(leftMoved < -500 && rightMoved > 500)
				{
					drive(0,0);
					step++;
				}
			}

			break;

		case(7):
			drive(50,50);
			lift(0);
			motorSet(CLAW, 0);

			getDriveIME(&leftMoved, &rightMoved);

			printf("Left: %d\nRight%d\n", leftMoved, rightMoved);

			if(leftMoved > 450 && rightMoved > 450)
			{
				drive(0,0);
				step++;
			}

			break;

		case(8):
			lift(-100);
			drive(0,0);
			motorSet(CLAW, 0);

			printf("Encoder: %d\n", encoderGet(liftEnc));

			if(deadBand(encoderGet(liftEnc), heights[skyRise], 100))
			{
				lift(0);

				step++;
			}
			break;

		case(9):
			motorSet(CLAW, CLAW_OPEN_SPEED);

			if(elapsedTime > 200)
			{
				motorSet(CLAW, 0);
				step++;
			}

			break;

		case(10):
			drive(-40,-40);
			lift(0);
			motorSet(CLAW, 0);

			getDriveIME(&leftMoved, &rightMoved);

			printf("Left: %d\nRight%d\n", leftMoved, rightMoved);

			if(leftMoved < -350 && rightMoved < -350)
			{
				drive(0,0);
				step++;
			}

			break;

		case(11):
			if(alliance == BLUE)
			{
				drive(-50,50);
				lift(0);
				motorSet(CLAW, 0);

				getDriveIME(&leftMoved, &rightMoved);

				printf("Left: %d\nRight%d\n", leftMoved, rightMoved);

				if(leftMoved < -500 && rightMoved > 500)
				{
					drive(0,0);
					step++;
				}
			}
			else
			{
				drive(50,-50);
				lift(0);
				motorSet(CLAW, 0);

				getDriveIME(&leftMoved, &rightMoved);

				printf("Left: %d\nRight%d\n", leftMoved, rightMoved);

				if(leftMoved > 500 && rightMoved < -500)
				{
					drive(0,0);
					step++;
				}
			}

			break;

		default:
			skyRise++;
			step = 1;
			if(skyRise > 1) isAuto = 0;
			break;
		}

		delay(20);
	}
}
